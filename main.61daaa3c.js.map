{"version":3,"sources":["scripts/main.js"],"names":["messageStart","document","querySelector","messageWin","messageLose","messageHowto","buttonStart","buttonHowto","gameScore","cells","querySelectorAll","boardSideSize","score","isButtonStart","isButtonHowto","board","addNewTile","randomNumber","Math","random","randomPlace","floor","length","innerHTML","isGameOver","className","resetBoard","cell","i","updateBoard","tiles","forEach","item","mergeInRow","mergedTile","parentElement","parseInt","isWinner","mergeInColumn","checkMovePossibility","boardShot","checkMovingDone","moveRight","moveHorisontal","moveLeft","moveDown","moveVertical","moveUp","isToRight","line","j","push","numbersCells","filter","number","zeroCells","Array","fill","newRow","concat","isToDown","move","body","addEventListener","e","key","classList","remove","add","emptyCells","target"],"mappings":"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","file":"main.61daaa3c.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\nconst messageHowto = document.querySelector('.message-howto');\nconst buttonStart = document.querySelector('.button');\nconst buttonHowto = document.querySelector('.howto');\nconst gameScore = document.querySelector('.game-score');\nconst cells = document.querySelectorAll('td');\n\nconst boardSideSize = 4;\nlet score = 0;\nlet isButtonStart = true;\nlet isButtonHowto = true;\nconst board = [];\n\nmove();\n\nbuttonHowto.addEventListener('click', e => {\n  if (isButtonHowto) {\n    e.target.innerHTML = 'Hide tips';\n    messageHowto.classList.remove('hidden');\n    isButtonHowto = false;\n  } else {\n    e.target.innerHTML = 'How to play';\n    messageHowto.classList.add('hidden');\n    isButtonHowto = true;\n  }\n});\n\nbuttonStart.addEventListener('click', e => {\n  if (isButtonStart) {\n    e.target.className = 'button restart';\n    e.target.innerHTML = 'Restart';\n    messageStart.classList.add('hidden');\n    isButtonStart = false;\n\n    addNewTile();\n    addNewTile();\n  } else {\n    e.target.className = 'button start';\n    e.target.innerHTML = 'Start';\n    messageStart.classList.remove('hidden');\n    messageLose.classList.add('hidden');\n    messageWin.classList.add('hidden');\n    isButtonStart = true;\n    resetBoard();\n  }\n});\n\nfunction addNewTile() {\n  const randomNumber = (Math.random() < 0.1) ? 4 : 2;\n  const randomPlace = Math.floor(Math.random() * cells.length);\n\n  if (!cells[randomPlace].innerHTML) {\n    cells[randomPlace].innerHTML = randomNumber;\n    cells[randomPlace].className = `field-cell field-cell--${randomNumber}`;\n  } else {\n    addNewTile();\n    isGameOver();\n  }\n}\n\nfunction resetBoard() {\n  for (const cell of cells) {\n    for (let i = 0; i < 16; i++) {\n      cell.innerHTML = '';\n      cell.className = 'field-cell';\n    }\n  }\n}\n\nfunction updateBoard(tiles) {\n  gameScore.innerHTML = score;\n\n  tiles.forEach(item => {\n    (item.innerHTML)\n      ? item.className = `field-cell field-cell--${item.innerHTML}`\n      : item.className = 'field-cell';\n  });\n}\n\nfunction mergeInRow() {\n  let mergedTile;\n\n  for (let i = 0; i < cells.length - 1; i++) {\n    if (cells[i].innerHTML === cells[i + 1].innerHTML\n      && cells[i].parentElement === cells[i + 1].parentElement) {\n      mergedTile = parseInt(cells[i].innerHTML)\n      + parseInt(cells[i + 1].innerHTML);\n      cells[i].innerHTML = mergedTile;\n      cells[i + 1].innerHTML = '';\n\n      if (mergedTile === parseInt(mergedTile)) {\n        score += mergedTile;\n      };\n    }\n  }\n  isWinner();\n}\n\nfunction mergeInColumn() {\n  let mergedTile;\n\n  for (let i = 0; i < cells.length - 4; i++) {\n    if (cells[i].innerHTML === cells[i + boardSideSize].innerHTML) {\n      mergedTile = parseInt(cells[i].innerHTML)\n      + parseInt(cells[i + boardSideSize].innerHTML);\n      cells[i].innerHTML = mergedTile;\n      cells[i + boardSideSize].innerHTML = '';\n\n      if (mergedTile === parseInt(mergedTile)) {\n        score += mergedTile;\n      };\n    }\n  }\n  isWinner();\n}\n\nfunction checkMovePossibility() {\n  for (let i = 0; i < cells.length - 4; i++) {\n    if (cells[i].innerHTML === cells[i + boardSideSize].innerHTML) {\n      return true;\n    }\n  }\n\n  for (let i = 0; i < cells.length - 1; i++) {\n    if (cells[i].innerHTML === cells[i + 1].innerHTML\n      && cells[i].parentElement === cells[i + 1].parentElement) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction boardShot() {\n  for (let i = 0; i < cells.length; i++) {\n    board[i] = cells[i].innerHTML;\n  }\n}\n\nfunction checkMovingDone() {\n  for (let i = 0; i < cells.length; i++) {\n    if (board[i] !== cells[i].innerHTML) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction moveRight() {\n  boardShot();\n  moveHorisontal(true);\n  mergeInRow();\n  moveHorisontal(true);\n\n  if (checkMovingDone()) {\n    addNewTile();\n  }\n}\n\nfunction moveLeft() {\n  boardShot();\n  moveHorisontal(false);\n  mergeInRow();\n  moveHorisontal(false);\n\n  if (checkMovingDone()) {\n    addNewTile();\n  }\n}\n\nfunction moveDown() {\n  boardShot();\n  moveVertical(true);\n  mergeInColumn();\n  moveVertical(true);\n\n  if (checkMovingDone()) {\n    addNewTile();\n  }\n}\n\nfunction moveUp() {\n  boardShot();\n  moveVertical(false);\n  mergeInColumn();\n  moveVertical(false);\n\n  if (checkMovingDone()) {\n    addNewTile();\n  }\n}\n\nfunction moveHorisontal(isToRight) {\n  for (let i = 0; i < cells.length; i = i + 4) {\n    const line = [];\n\n    for (let j = 0; j < boardSideSize; j++) {\n      line.push(parseInt(cells[i + j].innerHTML));\n    }\n\n    const numbersCells = line.filter(number => number);\n    const zeroCells = new Array(4 - numbersCells.length).fill('');\n\n    const newRow = (isToRight) ? zeroCells.concat(numbersCells)\n      : numbersCells.concat(zeroCells);\n\n    for (let j = 0; j < boardSideSize; j++) {\n      cells[i + j].innerHTML = newRow[j];\n    }\n    updateBoard(cells);\n  }\n}\n\nfunction moveVertical(isToDown) {\n  for (let i = 0; i < boardSideSize; i++) {\n    const line = [];\n\n    for (let j = 0; j < boardSideSize; j++) {\n      line.push(parseInt(cells[i + boardSideSize * j].innerHTML));\n    }\n\n    const numbersCells = line.filter(number => number);\n    const zeroCells = new Array(4 - numbersCells.length).fill('');\n\n    const newRow = (isToDown) ? zeroCells.concat(numbersCells)\n      : numbersCells.concat(zeroCells);\n\n    for (let j = 0; j < boardSideSize; j++) {\n      cells[i + boardSideSize * j].innerHTML = newRow[j];\n    }\n    updateBoard(cells);\n  }\n}\n\nfunction move() {\n  document.body.addEventListener('keydown', e => {\n    if (!isButtonStart) {\n      switch (e.key) {\n        case 'ArrowLeft':\n          moveLeft();\n          break;\n\n        case 'ArrowRight':\n          moveRight();\n          break;\n\n        case 'ArrowUp':\n          moveUp();\n          break;\n\n        case 'ArrowDown':\n          moveDown();\n          break;\n      }\n    }\n  });\n}\n\nfunction isWinner() {\n  for (let i = 0; i < cells.length; i++) {\n    if (cells[i].innerHTML === '2048') {\n      messageWin.classList.remove('hidden');\n      messageStart.classList.add('hidden');\n      messageLose.classList.add('hidden');\n    }\n  }\n}\n\nfunction isGameOver() {\n  let emptyCells = 0;\n\n  for (let i = 0; i < cells.length; i++) {\n    if (!cells[i].innerHTML) {\n      emptyCells++;\n    }\n  }\n\n  if (!emptyCells && !checkMovePossibility()) {\n    messageLose.classList.remove('hidden');\n    messageWin.classList.add('hidden');\n    messageStart.classList.add('hidden');\n  }\n}\n"]}